
1.What are the 4 main characteristics of OOP, and what do they mean?

	Abstraction, Polymorphism, Inheritance, Encapsulation
	Abstraction-Allows you to create classes that give you a blueprint that you can use across other classes.  It gives you the option to customize the methods to fit the class that extends the 	abstract class.

	Polymorphism- You can use when you want to use classes interchangebly where it is allowed.  It allows you to call on methods from parent classes from a child class.
	
	Inheritance- Allows you to limit the amount of code that you right by creating objects and passing down similar state and behaviors when the objects have a relationship.

	Encapsulation-helps keep your data private by limiting access to variables that you may not want changed. 

i. For each of the 4 OOP concepts, explain an example where the concept could apply practically to Android development.
	
	Abstraction-You can use abstraction when you want different classes to use the same methods but also allow them to customize functionality.

	Polymorphism- You can use it in arrayLists or methods where you are expecting an object element.  You will be able to use parent classes as well as child classes in the Arraylist.
	
	Inheritance- with inheritance you could create a game where you have a parent class of character and pass state and behavior to child classes or other characters.  You only have to write the code 	once and can create as many characters as you want. 

	Encapsulation-You may have a game where you want to keep the high score private, because you donâ€™t want people to change it.	

ii. Are there any tradeoffs between these concepts in your opinion? If so, what are they?
	In encapsulation you are limiting access to your data across classes, but with inheritance you are allowing classes to share methods and variables.

2.Abstract classes and Interfaces are useful in Java and in Android development. Explain an example of an Interface we use often in Android.

	In android we regularly use onClickListeners. It gives us the option to fill the body of the interface, and pass it customized functionality.

i. What is the difference between an Abstract Class and an Interface? If you don't know, that's alright - look it up and rephrase in your own words.	
	An abstract class can have regular methods and class variables and interfaces can't.  All functionality in interfaces is abstract.  

ii. How do Interfaces and Abstract Classes relate to polymorphism? Can you give an example of this from lessons or labs that we've talked about?
	Polymorphism allows you to use classes interchangeably.  Interfaces and abstract classes are used by many different classes with gives you flexibility. an example of interfaces and polymorphism is when we use lists and arraylist. ex: List<String> strList = new ArrayList<String>(); 



3.We often use private member variables when creating classes. Why is it good to have private member variables instead of public? How do we grant access to such variables usually?
	it is good to have private variable because it limits access, so that people cannot change your code.  To make a variable private you have to declare it as private. Ex: private int age; You can still use these variables by using setters and getters.

For further reading, we'd like you to check out Java 8 Pocket Guide Chapter 5: Classes and Objects, all the way up through the Interfaces section.